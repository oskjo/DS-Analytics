
# coding: utf-8

# In[1]:

def donuts(count):
    if count <10:
        return "Number of donuts: "+ str(count)
    else:
        return "Number of donuts: "+ "many"
    return 


# In[2]:

donuts(12)


# In[3]:

def both_ends(s):
    if len(s)<2:
        return str('')
    else:
        return s[:2]+s[-2:]


# In[4]:

both_ends("spring")


# In[5]:

def fix_start(s):
    out=s[0]+s[1:].replace(s[0], '*') 
    return out


# In[6]:

fix_start("abababab")


# In[7]:

def mix_up(a, b):
    a_new=b[0]+b[1]+a[2:]
    b_new=a[0]+a[1]+b[2:]
    out=a_new+' '+b_new
    return out


# In[8]:

mix_up('doggg','dinnered')


# In[9]:

def test(got, expected):
    prefix = 'OK' if got == expected else ' X'
    # !r prints a Python representation of the strings (complete with quotes)
    print ' {} got: {!r} expected: {!r}'.format(prefix, got, expected)


# In[58]:

def main():
    print 'donuts'
    # Each line calls donuts, compares its result to the expected for that call.
    test(donuts(4), 'Number of donuts: 4')
    test(donuts(9), 'Number of donuts: 9')
    test(donuts(10), 'Number of donuts: many')
    test(donuts(99), 'Number of donuts: many')

    print
    print 'both_ends'
    test(both_ends('spring'), 'spng')
    test(both_ends('Hello'), 'Helo')
    test(both_ends('a'), '')
    test(both_ends('xyz'), 'xyyz')

  
    print
    print 'fix_start'
    test(fix_start('babble'), 'ba**le')
    test(fix_start('aardvark'), 'a*rdv*rk')
    test(fix_start('google'), 'goo*le')
    test(fix_start('donut'), 'donut')

    print
    print 'mix_up'
    test(mix_up('mix', 'pod'), 'pox mid')
    test(mix_up('dog', 'dinner'), 'dig donner')
    test(mix_up('gnash', 'sport'), 'spash gnort')
    test(mix_up('pezzy', 'firm'), 'fizzy perm')

    print 'verbing'
    test(verbing('hail'), 'hailing')
    test(verbing('swiming'), 'swimingly')
    test(verbing('do'), 'do')
    
    print
    print 'not_bad'
    test(not_bad('This movie is not so bad'), 'This movie is good')
    test(not_bad('This dinner is not that bad!'), 'This dinner is good!')
    test(not_bad('This tea is not hot'), 'This tea is not hot')
    test(not_bad("It's bad yet not"), "It's bad yet not")

    print
    print 'front_back'
    test(front_back('abcd', 'xy'), 'abxcdy')
    test(front_back('abcde', 'xyz'), 'abcxydez')
    test(front_back('Kitten', 'Donut'), 'KitDontenut')    


# In[59]:

main()


# In[13]:

def verbing(s):
    if (len(s)>=3):
        if(s[-3:]!='ing'):
            return s+'ing'
        else:
            return s+'ly'
    else:
        return s


# In[14]:

verbing("tabling")


# In[54]:

def not_bad(s):
    index_not=s.find('not')
    index_bad=s.find('bad')
    if (index_not!=-1 and index_bad!=-1 and index_not<index_bad):
        out=s[:index_not]+'good'+s[index_bad+3:]
        return out    
    else:
        out=s
        return out
        
    


# In[55]:

not_bad('This dinner is not that bad!')


# In[60]:

import math
def front_back(a, b):
    a1=a[:int(math.ceil(float(len(a))/2))]
    b1=b[:int(math.ceil(float(len(b))/2))]
    a2=a[-int(math.floor(float(len(a))/2)):]
    b2=b[-int(math.floor(float(len(b))/2)):]
    out=a1+b1+a2+b2
    return out


# In[61]:

front_back('abcde','aa')


# In[62]:

main()


# In[ ]:



