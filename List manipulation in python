
# coding: utf-8

# In[ ]:

def match_ends(words):
    out=0
    for i in range(len(words)):
        if(len(words[i])>=2 and words[i][0]==words[i][-1:]):
            out=out+1
    return out


# In[ ]:

match_ends(['aba', 'xyz', 'aa', 'x', 'bbb'])


# In[ ]:

def front_x(words):
    list_x=[name for name in words if (name[0]=='x')]
    list_x=sorted(list_x)
    out=list_x+sorted([name for name in words if name not in list_x])
    return out


# In[ ]:

front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark'])


# In[ ]:

def sort_last(tuples):
    def last_value_tuple (t):
        return t[-1]
    return sorted (tuples, key=last_value_tuple)
    return


# In[ ]:

def test(got, expected):
    prefix = 'OK' if got == expected else ' X'
    # !r prints a Python representation of the strings (complete with quotes)
    print ' {} got: {!r} expected: {!r}'.format(prefix, got, expected)


# In[ ]:

def main():
    print 'match_ends'
    test(match_ends(['aba', 'xyz', 'aa', 'x', 'bbb']), 3)
    test(match_ends(['', 'x', 'xy', 'xyx', 'xx']), 2)
    test(match_ends(['aaa', 'be', 'abc', 'hello']), 1)

    print
    print 'front_x'
    test(front_x(['bbb', 'ccc', 'axx', 'xzz', 'xaa']),
        ['xaa', 'xzz', 'axx', 'bbb', 'ccc'])
    test(front_x(['ccc', 'bbb', 'aaa', 'xcc', 'xaa']),
        ['xaa', 'xcc', 'aaa', 'bbb', 'ccc'])
    test(front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']),
        ['xanadu', 'xyz', 'aardvark', 'apple', 'mix'])
    
    print
    print 'sort_last'
    test(sort_last([(1, 3), (3, 2), (2, 1)]),
         [(2, 1), (3, 2), (1, 3)])
    test(sort_last([(2, 3), (1, 2), (3, 1)]),
         [(3, 1), (1, 2), (2, 3)])
    test(sort_last([(1, 7), (1, 3), (3, 4, 5), (2, 2)]),
         [(2, 2), (1, 3), (3, 4, 5), (1, 7)])


# In[ ]:

main()


# In[ ]:

def remove_adjacent(nums):
    i = 1
    while i < len(nums):    
        if nums[i] == nums[i-1]:
            nums.pop(i)
            i = i-1  
        i = i+1 
    return nums


# In[ ]:

remove_adjacent([1, 2, 2, 3])


# In[ ]:

def linear_merge(list1, list2):
    out = []
    i=0
    j=0
    max_iter = len(list1) + len(list2)
    while len(out) != max_iter:
        if len(list1) == i:
            out += list2[j:]
            break
        elif len(list2) == j:
            out += list1[i:]
            break
        elif list1[i] < list2[j]:
            out.append(list1[i])
            i += 1
        else:
            out.append(list2[j])
            j += 1
    return out



